{"version":3,"sources":["components/Form.jsx","components/TodoListDisplayer.jsx","components/header.jsx","App.js","index.js"],"names":["Form","addToDo","useState","input","setInput","onSubmit","event","uuid","preventDefault","className","action","type","placeholder","value","required","onChange","target","console","log","TodoListDisplayer","item","removeTodo","completeTodo2","completeTodo","done","setDone","text","onClick","id","header","App","toDoItems","setToDoItems","idTest","updatedTodos","filter","completedTodo","map","completed","newToDo","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PA4CeA,EApCF,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAEZ,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAsBF,OACE,uBAAMC,SAbe,SAACC,GACTC,MACTD,EAAME,iBAINP,EAAQE,GACRC,EAAS,KAMiBK,UAAY,YAAYC,OAAO,GAA7D,UACI,uBAAOC,KAAK,OAAOC,YAAa,WAAWH,UAAU,aACrDI,MAAOV,EACPW,UAAQ,EACRC,SAxBkB,SAAAT,GAElBF,EAASE,EAAMU,OAAOH,OACtBI,QAAQC,IAAIZ,MAuBZ,wBAAQG,UAAU,cAAcE,KAAK,SAArC,qB,OCNOQ,MArBf,YAA8E,IAAjDC,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,WAA0BC,GAAgB,EAA9BC,aAA8B,EAAhBD,eAE3D,EAAwBpB,oBAAS,GAAjC,mBAAOsB,EAAP,KAAaC,EAAb,KAIA,OAGE,cAFA,CAEA,OAAKhB,UAAWe,EAAO,oBAAsB,WAA7C,UACKJ,EAAKM,KACN,sBAAKjB,UAAU,QAAf,UACA,cAAC,IAAD,CAAmBkB,QAAS,kBAAIN,EAAWD,EAAKQ,KAAKnB,UAAU,gBAC/D,cAAC,IAAD,CACAkB,QAAS,WAAOL,EAAcF,EAAKQ,IAXfH,GAASD,IAY7Bf,UAAU,qBCjBHoB,MARf,WACE,OACE,qBAAKpB,UAAU,SAAf,SACI,+CC4EOqB,MAzEf,WAEO,IAGA,EAAkC5B,mBAAS,IAA3C,mBAAO6B,EAAP,KAAkBC,EAAlB,KAiBMX,EAAa,SAACY,GAOb,IAAIC,EAAe,YAAIH,GAAWI,QAAO,SAACf,GAAD,OAAUA,EAAKQ,KAAOK,KAC/DD,EAAaE,IAGdX,EAAe,SAACK,GAGf,IAAIQ,EAAgB,YAAIL,GAAWM,KAAI,SAACjB,GAAD,OAAUA,EAAKkB,WAAalB,EAAKkB,aAGxEN,EAAaI,GACbnB,QAAQC,IAAIkB,IAKbd,EAAgB,SAACM,GAChB,IAAIQ,EAAgB,YAAIL,GAAWM,KAAI,SAACjB,GAIjC,OAHGA,EAAKQ,KAAOA,IACRR,EAAKkB,WAAalB,EAAKkB,WAEvBP,KAEdd,QAAQC,IAAIkB,IAIzB,OACA,sBAAK3B,UAAY,WAAjB,UACM,cAAC,EAAD,IACA,cAAC,EAAD,CACOR,QApDS,SAACyB,GACV,IAQIa,EAAO,CALI,CACRX,GAJErB,MAKFmB,KAAMA,EACNY,WAAW,IAEP,mBAAkBP,IAC7BC,EAAaO,MA4CnBR,EAAUM,KAAK,SAAAjB,GAGT,OAAO,cAAC,EAAD,CAAmBC,WAAcA,EAAYC,cAAiBA,EAAeC,aAAgBA,EAAcH,KAAQA,GAAWA,EAAKQ,WCnExJY,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.da103641.chunk.js","sourcesContent":["//THIS IS THE ADDER. THE FILE CONTAINING \r\n//THE CODE THAT ADDS AND UPDATES ITEMS TO A TO DO LIST. THE\r\n//FILE THAT CONTAINS THE CODE WHERE THE USER TYPES AN EVENT\r\n\r\nimport React, { useState } from 'react'\r\nimport uuid from 'react-uuid';\r\nimport TodoList from './TodoListDisplayer';\r\n\r\nconst Form = ({ addToDo }) => {\r\n    //Keep track of user inputing an item into the to do list\r\n    const [input, setInput] = useState(\"\");\r\n\r\n    \r\n    const onInputChange = event =>{\r\n        //set input to whatever the user is typing\r\n        setInput(event.target.value);\r\n        console.log(event)\r\n        //event.target.value is a default made by react to automatically update\r\n    }\r\n\r\n    const onFormSubmit = (event) => {\r\n        let id = uuid()\r\n        event.preventDefault();\r\n        /*preventDefault() is another default used to \r\n        change the state back to the original/default*/\r\n        //setToDoItems([toDoItems, { id, title: input, completed: false }])\r\n        addToDo(input)\r\n        setInput(\"\");\r\n    }\r\n\r\n   \r\n\r\n  return (\r\n    <form onSubmit={onFormSubmit} className = \"todo-form\" action=\"\">\r\n        <input type=\"text\" placeholder =\"Add Item\" className=\"todo-input\" \r\n        value={input} \r\n        required\r\n        onChange={onInputChange}//check if the user is typing or if the user has typed a to do item\r\n        />\r\n        <button className=\"todo-button\" type='submit'>Add</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default Form","import React from 'react'\r\nimport { useState } from 'react'\r\nimport Form from \"../components/Form\"\r\nimport { RiCloseCircleLine, RiCheckFill } from \"react-icons/ri\"\r\nimport { TiEdit } from \"react-icons/ti\"\r\n// import Todo from './Todo'\r\n// import TodoForm from './TodoForm'\r\n\r\n//This file gets those items from the array and displays them\r\n//in a list\r\n\r\n\r\nfunction TodoListDisplayer({ item, removeTodo, completeTodo, completeTodo2}) {\r\n\r\n  const [done, setDone] = useState(false);\r\n  const handleClick = () => setDone(!done);\r\n\r\n     \r\n  return (\r\n    /*item is a prop that is gotten from the app\r\n    component. It references the object in the addToDo function*/\r\n    <div className={done ? 'todo-row complete' : \"todo-row\"}>\r\n        {item.text}\r\n        <div className=\"icons\">\r\n        <RiCloseCircleLine onClick={()=>removeTodo(item.id)} className=\"delete-icon\"/>\r\n        <RiCheckFill \r\n        onClick={() => {completeTodo2(item.id); handleClick();}}\r\n        className=\"edit-icon\"/>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoListDisplayer\r\n\r\n// function TodoListDisplayer() {\r\n//     const[todos, setTodos] = useState([])\r\n\r\n//     const addTodo = todo =>{\r\n//         if(!todo.text || /^\\s*$/.test(todo.text)){\r\n//             return;\r\n//         }\r\n\r\n//         const newTodos = [todo, ...todos]\r\n\r\n//         setTodos(newTodos);\r\n//         console.log(...todos);\r\n//     }\r\n\r\n    \r\n//     const updateTodo = (todoId, newValue) => {\r\n//         if(!newValue.text || /^\\s*$/.test(newValue.text)){\r\n//             return;\r\n//         }\r\n//          setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item))\r\n//          );\r\n//     }\r\n\r\n//     const removeTodo = id => {\r\n//         const removeArr = [...todos].filter(todo => todo.id!==id)\r\n//         setTodos(removeArr)\r\n//     }\r\n\r\n\r\n//     const completeTodo = id =>{\r\n//         let updatedTodos = todos.map(todo => {\r\n//             if (todo.id === id){\r\n//                 todo.isComplete = !todo.isComplete\r\n//             }\r\n//             return todo\r\n//         })\r\n\r\n//         setTodos(updatedTodos);\r\n//     }\r\n\r\n//     return (\r\n//         <>\r\n//             <h1>What are you doing today</h1>\r\n//             <TodoForm onSubmit={addTodo}/>\r\n//             <Todo \r\n//             todos={todos} \r\n//             completeTodo={completeTodo} \r\n//             removeTodo={removeTodo}\r\n//             updateTodo={updateTodo}  />\r\n//         </>\r\n//     )\r\n// }\r\n\r\n// export default TodoListDisplayer\r\n","import React from 'react'\r\n\r\nfunction header() {\r\n  return (\r\n    <div className='header'>\r\n        <h1>TO DO LIST</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default header","import './App.css';\nimport { useState } from \"react\";\nimport TodoListDisplayer from './components/TodoListDisplayer';\nimport Header from \"./components/header\"\nimport Form from './components/Form';\nimport uuid from 'react-uuid';\n\n\nfunction App() {\n     \n       let idTest = 1;\n       \n       //Keep track of items in to do list\n       const [toDoItems, setToDoItems] = useState([]);\n\n       /*Function that pushes a text object into an array*/\n       const addToDo = (text) =>{\n              let id = uuid()\n              /*toDoItem takes the user text  input and gives it \n              an ID and a completed status*/\n              let toDoItem = {\n                     id: id,\n                     text: text,\n                     completed: false\n              }\n              let newToDo = ([toDoItem, ...toDoItems])\n              setToDoItems(newToDo)\n              //console.log(newToDo)\n       }\n\n       const removeTodo = (idTest) => {\n              //console.log(id)\n              /*takes the current array state then \n              filters each item*/\n              /*idTest is a random variable that will never be \n              equal to the id of each to do item so all items will always\n              be filtered out*/\n              let updatedTodos = [...toDoItems].filter((item) => item.id !== idTest)\n              setToDoItems(updatedTodos) \n       }\n\n       const completeTodo = (id) => {\n              /*toDoItem takes the user text  input and gives it \n              an ID and a completed status*/\n              let completedTodo = [...toDoItems].map((item) => item.completed = !item.completed)\n              //let newToDo = ([item, ...toDoItems])\n              //console.log(\"egg\")\n              setToDoItems(completedTodo)\n              console.log(completedTodo)\n       }\n\n       /* id  varibale gets the id of each item in the array\n       it then checks if it exists then sets the completed status to true */\n       const completeTodo2 = (id) => {\n              let completedTodo = [...toDoItems].map((item) =>{\n                     if(item.id === id){\n                            item.completed = !item.completed\n                     }\n                     return toDoItems\n              })\n              console.log(completedTodo)\n       }\n\n\n return(\n <div className = 'todo-app'>\n       <Header/>\n       <Form\n              addToDo = {addToDo}\n       />\n       {toDoItems.map((item => {\n              /*for each item in toDoItems array display the displayer\n             */\n              return(<TodoListDisplayer removeTodo = {removeTodo} completeTodo2 = {completeTodo2} completeTodo = {completeTodo} item = {item} key={item.id}/>)\n       }))}\n       {/* <TodoListDisplayer/> */}\n </div>\n )\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}